const { ethers } = require('ethers')

// Outputted by solc contracts/DeploylessUniversalSigValidator.sol --bin
const universalValidator = '0x608060405234801561001057600080fd5b5060405161131738038061131783398181016040528101906100329190610303565b6000604051610040906100ed565b604051809103906000f08015801561005c573d6000803e3d6000fd5b50905060008173ffffffffffffffffffffffffffffffffffffffff16635f95d17d8686866040518463ffffffff1660e01b815260040161009e939291906103e5565b6020604051808303816000875af11580156100bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e1919061045b565b9050806000526001601ff35b610e8e8061048983390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101398261010e565b9050919050565b6101498161012e565b811461015457600080fd5b50565b60008151905061016681610140565b92915050565b6000819050919050565b61017f8161016c565b811461018a57600080fd5b50565b60008151905061019c81610176565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101f5826101ac565b810181811067ffffffffffffffff82111715610214576102136101bd565b5b80604052505050565b60006102276100fa565b905061023382826101ec565b919050565b600067ffffffffffffffff821115610253576102526101bd565b5b61025c826101ac565b9050602081019050919050565b60005b8381101561028757808201518184015260208101905061026c565b60008484015250505050565b60006102a66102a184610238565b61021d565b9050828152602081018484840111156102c2576102c16101a7565b5b6102cd848285610269565b509392505050565b600082601f8301126102ea576102e96101a2565b5b81516102fa848260208601610293565b91505092915050565b60008060006060848603121561031c5761031b610104565b5b600061032a86828701610157565b935050602061033b8682870161018d565b925050604084015167ffffffffffffffff81111561035c5761035b610109565b5b610368868287016102d5565b9150509250925092565b61037b8161012e565b82525050565b61038a8161016c565b82525050565b600081519050919050565b600082825260208201905092915050565b60006103b782610390565b6103c1818561039b565b93506103d1818560208601610269565b6103da816101ac565b840191505092915050565b60006060820190506103fa6000830186610372565b6104076020830185610381565b818103604083015261041981846103ac565b9050949350505050565b60008115159050919050565b61043881610423565b811461044357600080fd5b50565b6000815190506104558161042f565b92915050565b60006020828403121561047157610470610104565b5b600061047f84828501610446565b9150509291505056fe608060405234801561001057600080fd5b50610e6e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635f95d17d14610030575b600080fd5b61004a60048036038101906100459190610635565b610060565b60405161005791906106c4565b60405180910390f35b6000808573ffffffffffffffffffffffffffffffffffffffff16803b806020016040519081016040528181526000908060200190933c90507f649264926492649264926492649264926492649264926492649264926492649260001b84846020878790506100ce9190610718565b9087879050926100e093929190610756565b906100eb91906107a9565b036102bc5783836000906020878790506101059190610718565b9261011293929190610756565b935093506000606080868681019061012a9190610987565b80935081945082955050505060008451036101ee5760008373ffffffffffffffffffffffffffffffffffffffff16836040516101669190610a83565b6000604051808303816000865af19150503d80600081146101a3576040519150601f19603f3d011682016040523d82523d6000602084013e6101a8565b606091505b50509050806101ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e390610af7565b60405180910390fd5b505b631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168973ffffffffffffffffffffffffffffffffffffffff16631626ba7e8a846040518363ffffffff1660e01b8152600401610250929190610b70565b602060405180830381865afa15801561026d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102919190610bf8565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614945050505050610520565b60008151111561039357631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168673ffffffffffffffffffffffffffffffffffffffff16631626ba7e8787876040518463ffffffff1660e01b815260040161032a93929190610c52565b602060405180830381865afa158015610347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036b9190610bf8565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050610520565b604184849050146103d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d090610cf6565b60405180910390fd5b600084846000906020926103ef93929190610756565b906103fa91906107a9565b90506000858560209060409261041293929190610756565b9061041d91906107a9565b905060008686604081811061043557610434610d16565b5b9050013560f81c60f81b60f81c9050601b8160ff161415801561045c5750601c8160ff1614155b1561049c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049390610db7565b60405180910390fd5b8873ffffffffffffffffffffffffffffffffffffffff16600189838686604051600081526020016040526040516104d69493929190610df3565b6020604051602081039080840390855afa1580156104f8573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff16149450505050505b949350505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105678261053c565b9050919050565b6105778161055c565b811461058257600080fd5b50565b6000813590506105948161056e565b92915050565b6000819050919050565b6105ad8161059a565b81146105b857600080fd5b50565b6000813590506105ca816105a4565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126105f5576105f46105d0565b5b8235905067ffffffffffffffff811115610612576106116105d5565b5b60208301915083600182028301111561062e5761062d6105da565b5b9250929050565b6000806000806060858703121561064f5761064e610532565b5b600061065d87828801610585565b945050602061066e878288016105bb565b935050604085013567ffffffffffffffff81111561068f5761068e610537565b5b61069b878288016105df565b925092505092959194509250565b60008115159050919050565b6106be816106a9565b82525050565b60006020820190506106d960008301846106b5565b92915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610723826106df565b915061072e836106df565b9250828203905081811115610746576107456106e9565b5b92915050565b600080fd5b600080fd5b6000808585111561076a5761076961074c565b5b8386111561077b5761077a610751565b5b6001850283019150848603905094509492505050565b600082905092915050565b600082821b905092915050565b60006107b58383610791565b826107c0813561059a565b92506020821015610800576107fb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080261079c565b831692505b505092915050565b60006108138261053c565b9050919050565b61082381610808565b811461082e57600080fd5b50565b6000813590506108408161081a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108948261084b565b810181811067ffffffffffffffff821117156108b3576108b261085c565b5b80604052505050565b60006108c6610528565b90506108d2828261088b565b919050565b600067ffffffffffffffff8211156108f2576108f161085c565b5b6108fb8261084b565b9050602081019050919050565b82818337600083830152505050565b600061092a610925846108d7565b6108bc565b90508281526020810184848401111561094657610945610846565b5b610951848285610908565b509392505050565b600082601f83011261096e5761096d6105d0565b5b813561097e848260208601610917565b91505092915050565b6000806000606084860312156109a05761099f610532565b5b60006109ae86828701610831565b935050602084013567ffffffffffffffff8111156109cf576109ce610537565b5b6109db86828701610959565b925050604084013567ffffffffffffffff8111156109fc576109fb610537565b5b610a0886828701610959565b9150509250925092565b600081519050919050565b600081905092915050565b60005b83811015610a46578082015181840152602081019050610a2b565b60008484015250505050565b6000610a5d82610a12565b610a678185610a1d565b9350610a77818560208601610a28565b80840191505092915050565b6000610a8f8284610a52565b915081905092915050565b600082825260208201905092915050565b7f5369676e617475726556616c696461746f723a206465706c6f796d656e740000600082015250565b6000610ae1601e83610a9a565b9150610aec82610aab565b602082019050919050565b60006020820190508181036000830152610b1081610ad4565b9050919050565b610b208161059a565b82525050565b600082825260208201905092915050565b6000610b4282610a12565b610b4c8185610b26565b9350610b5c818560208601610a28565b610b658161084b565b840191505092915050565b6000604082019050610b856000830185610b17565b8181036020830152610b978184610b37565b90509392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610bd581610ba0565b8114610be057600080fd5b50565b600081519050610bf281610bcc565b92915050565b600060208284031215610c0e57610c0d610532565b5b6000610c1c84828501610be3565b91505092915050565b6000610c318385610b26565b9350610c3e838584610908565b610c478361084b565b840190509392505050565b6000604082019050610c676000830186610b17565b8181036020830152610c7a818486610c25565b9050949350505050565b7f5369676e617475726556616c696461746f72237265636f7665725369676e657260008201527f3a20696e76616c6964207369676e6174757265206c656e677468000000000000602082015250565b6000610ce0603a83610a9a565b9150610ceb82610c84565b604082019050919050565b60006020820190508181036000830152610d0f81610cd3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5369676e617475726556616c696461746f72237265636f7665725369676e657260008201527f3a20696e76616c6964207369676e617475726520762076616c75650000000000602082015250565b6000610da1603b83610a9a565b9150610dac82610d45565b604082019050919050565b60006020820190508181036000830152610dd081610d94565b9050919050565b600060ff82169050919050565b610ded81610dd7565b82525050565b6000608082019050610e086000830187610b17565b610e156020830186610de4565b610e226040830185610b17565b610e2f6060830184610b17565b9594505050505056fea2646970667358221220cf870ba43e3bc31af4f85f5c7f145d703d505c7a21bb41a099dce88fe4983e8464736f6c63430008110033'

/**
 * @typedef { import("@ethersproject/abstract-signer").TypedDataDomain } TypedDataDomain
 * @typedef { import("@ethersproject/abstract-signer").TypedDataField } TypedDataField
 * @typedef { import("@ethersproject/providers").Provider } Provider
 */

/**
 * @param {Provider | window.ethereum} provider Web3 Compatible provider to perform smart contract wallet validation with EIP 1271 (window.ethereum, web3.currentProvider, ethers provider... )
 * @param {string} signer The signer address to verify the signature against
 * @param {string | Uint8Array} message To verify eth_sign type of signatures. Human-readable message to verify. Message should be a human string or the hex version of the human string encoded as Uint8Array. If a hex string is passed, it will be considered as a regular string
 * @param {{domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, message: Record<string, any>}} typedData To verify a 712 signature type. The {domain, type, message} 712 message object
 * @param {string} finalDigest The final digest to verify. dApp will have to pre-compute the hash as no hashing transformation will occur and this digest will be directly used for recoverAddress and isValidSignature
 * @param {string | Uint8Array} signature The signature to verify as a hex string or Uint8Array
 * @param {function(string, string, string | Uint8Array): boolean} undeployedCallback An optional 1271 callback function to gracefully handle signature validation for non-deployed smart contract wallets
 * @returns {Promise<boolean>}
 * NOTE: you only need to pass one of: typedData, finalDigest, message
 */
const verifyMessage = async ({ provider, signer, message, typedData, finalDigest, signature }) => {
  if (message) {
    finalDigest = ethers.utils.hashMessage(message)
  } else if (typedData) {
    if (!typedData.domain || !typedData.types || !typedData.message) {
      throw Error('Missing one or more properties for typedData (domain, types, message)')
    }

    finalDigest = ethers.utils._TypedDataEncoder.hash(typedData.domain, typedData.types, typedData.message)
  } else if (!finalDigest) {
    throw Error('Missing one of the properties: message, unPrefixedMessage, typedData or finalDigest')
  }

  // this 'magic' universal validator contract will deploy itself within the eth_call, try to verify the signature using
  // ERC-6492, ERC-1271 and ecrecover, and return the value to us
  const coder = new ethers.utils.AbiCoder()
  const callResult = await provider.call({
    data: ethers.utils.concat([
      universalValidator,
      coder.encode(['address', 'bytes32', 'bytes'], [signer, finalDigest, signature])
    ])
  })

  if (callResult === '0x01') return true
  if (callResult === '0x00') return false
  if (callResult.startsWith('0x08c379a0')) throw new Error(coder.decode(['string'], '0x' + callResult.slice(10))[0])
  throw new Error('Unexpected result from UniversalValidator: '+callResult)
}

module.exports = {
  verifyMessage
}
