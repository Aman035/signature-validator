const { ethers } = require('ethers')

// Outputted by solc contracts/DeploylessUniversalSigValidator.sol --bin
const universalValidator = '0x608060405234801561001057600080fd5b5060405161124b38038061124b83398181016040528101906100329190610303565b6000604051610040906100ed565b604051809103906000f08015801561005c573d6000803e3d6000fd5b50905060008173ffffffffffffffffffffffffffffffffffffffff16635f95d17d8686866040518463ffffffff1660e01b815260040161009e939291906103e5565b6020604051808303816000875af11580156100bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e1919061045b565b9050806000526001601ff35b610dc28061048983390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101398261010e565b9050919050565b6101498161012e565b811461015457600080fd5b50565b60008151905061016681610140565b92915050565b6000819050919050565b61017f8161016c565b811461018a57600080fd5b50565b60008151905061019c81610176565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101f5826101ac565b810181811067ffffffffffffffff82111715610214576102136101bd565b5b80604052505050565b60006102276100fa565b905061023382826101ec565b919050565b600067ffffffffffffffff821115610253576102526101bd565b5b61025c826101ac565b9050602081019050919050565b60005b8381101561028757808201518184015260208101905061026c565b60008484015250505050565b60006102a66102a184610238565b61021d565b9050828152602081018484840111156102c2576102c16101a7565b5b6102cd848285610269565b509392505050565b600082601f8301126102ea576102e96101a2565b5b81516102fa848260208601610293565b91505092915050565b60008060006060848603121561031c5761031b610104565b5b600061032a86828701610157565b935050602061033b8682870161018d565b925050604084015167ffffffffffffffff81111561035c5761035b610109565b5b610368868287016102d5565b9150509250925092565b61037b8161012e565b82525050565b61038a8161016c565b82525050565b600081519050919050565b600082825260208201905092915050565b60006103b782610390565b6103c1818561039b565b93506103d1818560208601610269565b6103da816101ac565b840191505092915050565b60006060820190506103fa6000830186610372565b6104076020830185610381565b818103604083015261041981846103ac565b9050949350505050565b60008115159050919050565b61043881610423565b811461044357600080fd5b50565b6000815190506104558161042f565b92915050565b60006020828403121561047157610470610104565b5b600061047f84828501610446565b9150509291505056fe608060405234801561001057600080fd5b50610da2806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635f95d17d14610030575b600080fd5b61004a60048036038101906100459190610604565b610060565b6040516100579190610693565b60405180910390f35b6000808573ffffffffffffffffffffffffffffffffffffffff16803b806020016040519081016040528181526000908060200190933c90507f649264926492649264926492649264926492649264926492649264926492649260001b84846020878790506100ce91906106e7565b9087879050926100e093929190610725565b906100eb9190610778565b0361028f57838360009060208787905061010591906106e7565b9261011293929190610725565b935093506000606080868681019061012a9190610956565b80935081945082955050505060008451036101c15760008373ffffffffffffffffffffffffffffffffffffffff16836040516101669190610a52565b6000604051808303816000865af19150503d80600081146101a3576040519150601f19603f3d011682016040523d82523d6000602084013e6101a8565b606091505b50509050806101bf576000955050505050506104ef565b505b631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168973ffffffffffffffffffffffffffffffffffffffff16631626ba7e8a846040518363ffffffff1660e01b8152600401610223929190610ac2565b602060405180830381865afa158015610240573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102649190610b4a565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149450505050506104ef565b60008151111561036657631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168673ffffffffffffffffffffffffffffffffffffffff16631626ba7e8787876040518463ffffffff1660e01b81526004016102fd93929190610ba4565b602060405180830381865afa15801561031a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033e9190610b4a565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506104ef565b604184849050146103ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a390610c59565b60405180910390fd5b600084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506000806000602084015192506040840151915060ff6041850151169050601b8160ff161415801561042a5750601c8160ff1614155b1561046a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046190610ceb565b60405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff1660018a838686604051600081526020016040526040516104a49493929190610d27565b6020604051602081039080840390855afa1580156104c6573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff1614955050505050505b949350505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105368261050b565b9050919050565b6105468161052b565b811461055157600080fd5b50565b6000813590506105638161053d565b92915050565b6000819050919050565b61057c81610569565b811461058757600080fd5b50565b60008135905061059981610573565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126105c4576105c361059f565b5b8235905067ffffffffffffffff8111156105e1576105e06105a4565b5b6020830191508360018202830111156105fd576105fc6105a9565b5b9250929050565b6000806000806060858703121561061e5761061d610501565b5b600061062c87828801610554565b945050602061063d8782880161058a565b935050604085013567ffffffffffffffff81111561065e5761065d610506565b5b61066a878288016105ae565b925092505092959194509250565b60008115159050919050565b61068d81610678565b82525050565b60006020820190506106a86000830184610684565b92915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106f2826106ae565b91506106fd836106ae565b9250828203905081811115610715576107146106b8565b5b92915050565b600080fd5b600080fd5b600080858511156107395761073861071b565b5b8386111561074a57610749610720565b5b6001850283019150848603905094509492505050565b600082905092915050565b600082821b905092915050565b60006107848383610760565b8261078f8135610569565b925060208210156107cf576107ca7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080261076b565b831692505b505092915050565b60006107e28261050b565b9050919050565b6107f2816107d7565b81146107fd57600080fd5b50565b60008135905061080f816107e9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108638261081a565b810181811067ffffffffffffffff821117156108825761088161082b565b5b80604052505050565b60006108956104f7565b90506108a1828261085a565b919050565b600067ffffffffffffffff8211156108c1576108c061082b565b5b6108ca8261081a565b9050602081019050919050565b82818337600083830152505050565b60006108f96108f4846108a6565b61088b565b90508281526020810184848401111561091557610914610815565b5b6109208482856108d7565b509392505050565b600082601f83011261093d5761093c61059f565b5b813561094d8482602086016108e6565b91505092915050565b60008060006060848603121561096f5761096e610501565b5b600061097d86828701610800565b935050602084013567ffffffffffffffff81111561099e5761099d610506565b5b6109aa86828701610928565b925050604084013567ffffffffffffffff8111156109cb576109ca610506565b5b6109d786828701610928565b9150509250925092565b600081519050919050565b600081905092915050565b60005b83811015610a155780820151818401526020810190506109fa565b60008484015250505050565b6000610a2c826109e1565b610a3681856109ec565b9350610a468185602086016109f7565b80840191505092915050565b6000610a5e8284610a21565b915081905092915050565b610a7281610569565b82525050565b600082825260208201905092915050565b6000610a94826109e1565b610a9e8185610a78565b9350610aae8185602086016109f7565b610ab78161081a565b840191505092915050565b6000604082019050610ad76000830185610a69565b8181036020830152610ae98184610a89565b90509392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610b2781610af2565b8114610b3257600080fd5b50565b600081519050610b4481610b1e565b92915050565b600060208284031215610b6057610b5f610501565b5b6000610b6e84828501610b35565b91505092915050565b6000610b838385610a78565b9350610b908385846108d7565b610b998361081a565b840190509392505050565b6000604082019050610bb96000830186610a69565b8181036020830152610bcc818486610b77565b9050949350505050565b600082825260208201905092915050565b7f5369676e617475726556616c696461746f72237265636f7665725369676e657260008201527f3a20696e76616c6964207369676e6174757265206c656e677468000000000000602082015250565b6000610c43603a83610bd6565b9150610c4e82610be7565b604082019050919050565b60006020820190508181036000830152610c7281610c36565b9050919050565b7f5369676e617475726556616c696461746f72237265636f7665725369676e657260008201527f3a20696e76616c6964207369676e6174757265202776272076616c7565000000602082015250565b6000610cd5603d83610bd6565b9150610ce082610c79565b604082019050919050565b60006020820190508181036000830152610d0481610cc8565b9050919050565b600060ff82169050919050565b610d2181610d0b565b82525050565b6000608082019050610d3c6000830187610a69565b610d496020830186610d18565b610d566040830185610a69565b610d636060830184610a69565b9594505050505056fea26469706673582212205a7cc8b71772063b259e363a2e1d81df27b4b22cf03fe905f5c27f5fdc130eac64736f6c63430008110033'

/**
 * @typedef { import("@ethersproject/abstract-signer").TypedDataDomain } TypedDataDomain
 * @typedef { import("@ethersproject/abstract-signer").TypedDataField } TypedDataField
 * @typedef { import("@ethersproject/providers").Provider } Provider
 */

/**
 * @param {Provider | window.ethereum} provider Web3 Compatible provider to perform smart contract wallet validation with EIP 1271 (window.ethereum, web3.currentProvider, ethers provider... )
 * @param {string} signer The signer address to verify the signature against
 * @param {string | Uint8Array} message To verify eth_sign type of signatures. Human-readable message to verify. Message should be a human string or the hex version of the human string encoded as Uint8Array. If a hex string is passed, it will be considered as a regular string
 * @param {{domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, message: Record<string, any>}} typedData To verify a 712 signature type. The {domain, type, message} 712 message object
 * @param {string} finalDigest The final digest to verify. dApp will have to pre-compute the hash as no hashing transformation will occur and this digest will be directly used for recoverAddress and isValidSignature
 * @param {string | Uint8Array} signature The signature to verify as a hex string or Uint8Array
 * @param {function(string, string, string | Uint8Array): boolean} undeployedCallback An optional 1271 callback function to gracefully handle signature validation for non-deployed smart contract wallets
 * @returns {Promise<boolean>}
 * NOTE: you only need to pass one of: typedData, finalDigest, message
 */
const verifyMessage = async ({ provider, signer, message, typedData, finalDigest, signature }) => {
  if (message) {
    finalDigest = ethers.utils.hashMessage(message)
  } else if (typedData) {
    if (!typedData.domain || !typedData.types || !typedData.message) {
      throw Error('Missing one or more properties for typedData (domain, types, message)')
    }

    finalDigest = ethers.utils._TypedDataEncoder.hash(typedData.domain, typedData.types, typedData.message)
  } else if (!finalDigest) {
    throw Error('Missing one of the properties: message, unPrefixedMessage, typedData or finalDigest')
  }

  // this 'magic' universal validator contract will deploy itself within the eth_call, try to verify the signature using
  // ERC-6492, ERC-1271 and ecrecover, and return the value to us
  const coder = new ethers.utils.AbiCoder()
  const callResult = await provider.call({
    data: ethers.utils.concat([
      universalValidator,
      coder.encode(['address', 'bytes32', 'bytes'], [signer, finalDigest, signature])
    ])
  })

  if (callResult === '0x01') return true
  if (callResult === '0x00') return false
  if (callResult.startsWith('0x08c379a0')) throw new Error(coder.decode(['string'], '0x' + callResult.slice(10))[0])
  throw new Error('Unexpected result from UniversalValidator: '+callResult)
}

module.exports = {
  verifyMessage
}
